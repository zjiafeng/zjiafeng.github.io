<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mongodb数据库基础操作、创建删除、数据增删改查</title>
    <url>/2020/06/05/Mongodb%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E3%80%81%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E3%80%81%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<h2 id="Mongodb数据库基础操作"><a href="#Mongodb数据库基础操作" class="headerlink" title="Mongodb数据库基础操作"></a>Mongodb数据库基础操作</h2><h3 id="启动mongodb数据库"><a href="#启动mongodb数据库" class="headerlink" title="启动mongodb数据库"></a>启动mongodb数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongod --dbpath mongodb数据库目录</span><br></pre></td></tr></table></figure>

<h3 id="进入mongodb语法环境、进行mongdb数据库的相关操作"><a href="#进入mongodb语法环境、进行mongdb数据库的相关操作" class="headerlink" title="进入mongodb语法环境、进行mongdb数据库的相关操作"></a>进入mongodb语法环境、进行mongdb数据库的相关操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">win+R &gt; mongo 或者</span><br><span class="line">win+R &gt; mongo 127.0.0.1:27017</span><br></pre></td></tr></table></figure>

<h3 id="查看所有数据库："><a href="#查看所有数据库：" class="headerlink" title="查看所有数据库："></a>查看所有数据库：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure>

<h3 id="查看当前所在数据库"><a href="#查看当前所在数据库" class="headerlink" title="查看当前所在数据库:"></a>查看当前所在数据库:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db</span><br></pre></td></tr></table></figure>

<h3 id="查看当前所在数据库中所有集合："><a href="#查看当前所在数据库中所有集合：" class="headerlink" title="查看当前所在数据库中所有集合："></a>查看当前所在数据库中所有集合：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show collections</span><br></pre></td></tr></table></figure>

<h3 id="查看当前数据库相关信息（名称、文档个数、视图、索引、大小等）"><a href="#查看当前数据库相关信息（名称、文档个数、视图、索引、大小等）" class="headerlink" title="查看当前数据库相关信息（名称、文档个数、视图、索引、大小等）:"></a>查看当前数据库相关信息（名称、文档个数、视图、索引、大小等）:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.stats()</span><br></pre></td></tr></table></figure>

<h3 id="创建、打开、切换-数据库："><a href="#创建、打开、切换-数据库：" class="headerlink" title="创建、打开、切换 数据库："></a>创建、打开、切换 数据库：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use 数据库名称</span><br><span class="line">use 这个命令很特殊，它具有打开、 切换、 创建数据库的功能：如果打开的这个数据库存在就是打开这个数据库。如果打开的是一个不存在的数据库，那么就会创建一个同名的数据库，并且插入一条数据（这样这个数据库才算创建成功）。</span><br><span class="line">db.user.insert(&#123;&quot;name&quot;: &quot;xiaoming&quot;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="删除当前数据库"><a href="#删除当前数据库" class="headerlink" title="删除当前数据库"></a>删除当前数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure>

<h3 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.集合名称.drop()</span><br></pre></td></tr></table></figure>

<h3 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cls</span><br></pre></td></tr></table></figure>

<h2 id="Mongodb数据相关操作、创建删除、数据增删改查…"><a href="#Mongodb数据相关操作、创建删除、数据增删改查…" class="headerlink" title="Mongodb数据相关操作、创建删除、数据增删改查…"></a>Mongodb数据相关操作、创建删除、数据增删改查…</h2><h3 id="插入（增加）数据"><a href="#插入（增加）数据" class="headerlink" title="插入（增加）数据"></a>插入（增加）数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.集合名称.insert(&#123;name:&quot;zhangsan&quot;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.集合名称.remove(&#123;name:&quot;zhangsan&quot;&#125;)</span><br><span class="line">默认情况下，remove()方法将删除所有符合删除条件的文档。 使用开启justOne选项将删除操作限制为仅匹配文档之一。</span><br><span class="line">db.集合名称.remove(&#123;name:&quot;zhangsan&quot;&#125;,&#123; justOne: true &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查找名字叫做小明的，把年龄更改为16岁：</span><br><span class="line">db.student.update(&#123;&quot;name&quot;:&quot;小明&quot;&#125;,&#123;$set:&#123;&quot;age&quot;:16&#125;&#125;);</span><br><span class="line">查找数学成绩是70，把年龄更改为33岁：</span><br><span class="line">db.student.update(&#123;&quot;score.shuxue&quot;:70&#125;,&#123;$set:&#123;&quot;age&quot;:33&#125;&#125;);</span><br><span class="line">更改所有匹配项【默认情况下，update()方法是更新单个文档。 要更新多个文档，请使用开启update()方法中的multi选项】。</span><br><span class="line">db.student.update(&#123;&quot;sex&quot;:&quot;男&quot;&#125;,&#123;$set:&#123;&quot;age&quot;:33&#125;&#125;,&#123;multi: true&#125;);</span><br><span class="line">完整替换，不出现$set关键字了：</span><br><span class="line">db.student.update(&#123;&quot;name&quot;:&quot;小明&quot;&#125;,&#123;&quot;name&quot;:&quot;大明&quot;,&quot;age&quot;:16&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、查询所有记录 </span><br><span class="line">db.collections.find();</span><br><span class="line">2、查询去掉后的当前聚集集合中的某列的重复数据 </span><br><span class="line">db.collections.distinct(&quot;name&quot;);</span><br><span class="line">3、查询 age &#x3D; 22 的记录 </span><br><span class="line">db.collections.find(&#123;age:22&#125;);</span><br><span class="line">4、查询 age &gt; 22 的记录</span><br><span class="line">db.collections.find(&#123;age:&#123;$gt:22&#125;&#125;);</span><br><span class="line">5、查询 age &lt; 22 的记录</span><br><span class="line">db.collections.find(&#123;age:&#123;$lt:22&#125;&#125;);</span><br><span class="line">6、查询 age &gt;&#x3D; 25 的记录 </span><br><span class="line">db.collections.find(&#123;age:&#123;$gte:22&#125;&#125;);</span><br><span class="line">7、查询 age &lt;&#x3D; 25 的记录 </span><br><span class="line">db.collections.find(&#123;age:&#123;$lte:25&#125;&#125;);</span><br><span class="line">8、查询 age &gt;&#x3D; 23 并且 age &lt;&#x3D; 26</span><br><span class="line">db.collections.find(&#123;age: &#123;$gte: 23, $lte: 26&#125;&#125;); </span><br><span class="line">9、查询 name 中包含 mongo 的数据       模糊查询用于搜索 </span><br><span class="line">db.userInfo.find(&#123;name: &#x2F;mongo&#x2F;&#125;); </span><br><span class="line">10、查询 name 中以 mongo 开头的 </span><br><span class="line">db.userInfo.find(&#123;name: &#x2F;^mongo&#x2F;&#125;); </span><br><span class="line">11、查询指定列 name、age 数据 </span><br><span class="line">db.userInfo.find(&#123;&#125;, &#123;name: 1, age: 1&#125;); </span><br><span class="line">12、查询指定列 name、age 数据, age &gt; 25 </span><br><span class="line">db.userInfo.find(&#123;age: &#123;$gt: 25&#125;&#125;, &#123;name: 1, age: 1&#125;); </span><br><span class="line">13、按照年龄排序    1 升序    -1 降序 </span><br><span class="line">升序：db.userInfo.find().sort(&#123;age: 1&#125;); </span><br><span class="line">降序：db.userInfo.find().sort(&#123;age: -1&#125;); </span><br><span class="line">14、查询 name &#x3D; zhangsan, age &#x3D; 22 的数据 </span><br><span class="line">db.userInfo.find(&#123;name: &#39;zhangsan&#39;, age: 22&#125;); </span><br><span class="line">15、查询前 5 条数据 </span><br><span class="line">db.userInfo.find().limit(5); </span><br><span class="line">16、查询 10 条以后的数据 </span><br><span class="line">db.userInfo.find().skip(10); </span><br><span class="line">17、查询在 5-10 之间的数据 </span><br><span class="line">db.userInfo.find().limit(10).skip(5); </span><br><span class="line">18、or 与 查询 </span><br><span class="line">db.userInfo.find(&#123;$or: [&#123;age: 22&#125;, &#123;age: 25&#125;]&#125;); </span><br><span class="line">19、findOne 查询第一条数据 </span><br><span class="line">db.userInfo.findOne(); </span><br><span class="line">20、查询某个结果集的记录条数   统计数量 </span><br><span class="line">db.userInfo.find(&#123;age: &#123;$gte: 25&#125;&#125;).count(); </span><br><span class="line">如果要返回限制之后的记录数量，要使用 count(true)或者 count(非 0)  </span><br><span class="line">db.users.find().skip(10).limit(5).count(true);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mongodb web</category>
      </categories>
      <tags>
        <tag>Mongodb</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>es5、es6、类、继承、单例模式</title>
    <url>/2020/03/12/es5%E3%80%81es6%E3%80%81%E7%B1%BB%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<h2 id="es5中类和静态方法"><a href="#es5中类和静态方法" class="headerlink" title="es5中类和静态方法"></a>es5中类和静态方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person(name,age)&#123;</span><br><span class="line">    &#x2F;&#x2F; 构造函数中的方法和属性</span><br><span class="line">    this.name &#x3D; name;</span><br><span class="line">    this.age &#x3D; age;</span><br><span class="line">    this.run &#x3D; function()&#123;</span><br><span class="line">        console.log(&#96;$&#123;this.name&#125;、$&#123;this.age&#125;&#96;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 原型链上的属性和方法可以被多个实例共享 </span><br><span class="line">Person.prototype.sex &#x3D; &quot;男&quot;;</span><br><span class="line">Person.prototype.work &#x3D; function()&#123;</span><br><span class="line">    console.log(&#96;$&#123;this.name&#125;、$&#123;this.age&#125;、$&#123;this.sex&#125;&#96;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 静态方法</span><br><span class="line">Person.setName &#x3D; function()&#123;</span><br><span class="line">    console.log(&#39;静态方法&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p &#x3D; new Person(&#39;张三&#39;,&#39;24&#39;); &#x2F;&#x2F;实例方法是通过实例化调用的，静态方法是通过类名直接调用的。</span><br><span class="line"></span><br><span class="line">p.run();</span><br><span class="line">p.work();</span><br></pre></td></tr></table></figure>

<h2 id="es5继承"><a href="#es5继承" class="headerlink" title="es5继承"></a>es5继承</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 原型链继承和对象冒充继承</span><br><span class="line"> * 对象冒充继承：没法继承原型链上的属性和方法</span><br><span class="line"> * 原型链继承：可以继承构造函数里面以及原型链上的属性和方法，实例化子类的时候没法给父类传参</span><br><span class="line"> * 二者结合使用 实现继承</span><br><span class="line"> *&#x2F;</span><br><span class="line"> function Person02(name,age)&#123;</span><br><span class="line">    this.name &#x3D; name;</span><br><span class="line">    this.age &#x3D; age;</span><br><span class="line">    this.run &#x3D; function()&#123;</span><br><span class="line">        console.log(this.name,this.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Web(name,age)&#123;</span><br><span class="line">    Person02.call(this,name,age); &#x2F;**对象冒充实现继承 *&#x2F;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Web.prototype &#x3D; new Person02(); &#x2F;**原型链继承 *&#x2F;</span><br><span class="line"></span><br><span class="line">var w &#x3D; new Web(&#39;李四&#39;,23);</span><br><span class="line">w.run();</span><br></pre></td></tr></table></figure>

<h2 id="es6类"><a href="#es6类" class="headerlink" title="es6类"></a>es6类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    constructor(name,age)&#123; &#x2F;&#x2F; 类的构造函数，new时执行，实例化时候执行</span><br><span class="line">        this._name &#x3D; name;</span><br><span class="line">        this._age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line">    getName()&#123;</span><br><span class="line">        console.log(&#96;姓名：$&#123;this._name&#125;、年龄：$&#123;this._age&#125;&#96;);</span><br><span class="line">    &#125;</span><br><span class="line">    setName(name)&#123;</span><br><span class="line">        this._name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p &#x3D; new Person(&#39;张三&#39;,24);</span><br><span class="line">p.setName(&#39;李四&#39;); </span><br><span class="line">p.getName();</span><br></pre></td></tr></table></figure>

<h2 id="es6继承"><a href="#es6继承" class="headerlink" title="es6继承"></a>es6继承</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person02&#123;</span><br><span class="line">    constructor(name,age)&#123; &#x2F;&#x2F; 类的构造函数，new时执行，实例化时候执行</span><br><span class="line">        this._name &#x3D; name;</span><br><span class="line">        this._age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line">    getInfo()&#123;</span><br><span class="line">        console.log(&#96;姓名：$&#123;this._name&#125;、年龄：$&#123;this._age&#125;&#96;);</span><br><span class="line">    &#125;</span><br><span class="line">    run()&#123;</span><br><span class="line">        console.log(&#39;run&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Web extends Person02&#123;</span><br><span class="line">    constructor(name,age,sex)&#123;</span><br><span class="line">        super(name,age); &#x2F;&#x2F;实例化子类时候把子类的数据传给父类</span><br><span class="line">        this.sex &#x3D; sex;</span><br><span class="line">    &#125;</span><br><span class="line">    print()&#123;</span><br><span class="line">        console.log(this.sex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var w &#x3D; new Web(&#39;王五&#39;,&#39;30&#39;,&#39;男&#39;);</span><br><span class="line">w.getInfo();</span><br><span class="line">w.print();</span><br></pre></td></tr></table></figure>

<h2 id="es6静态方法"><a href="#es6静态方法" class="headerlink" title="es6静态方法"></a>es6静态方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person03&#123;</span><br><span class="line">    constructor(name)&#123;</span><br><span class="line">        this._name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line">    static work()&#123;</span><br><span class="line">        console.log(&#39;这是es6中的静态方法&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var s &#x3D; new Person03();</span><br><span class="line">Person03.work();</span><br></pre></td></tr></table></figure>

<h2 id="es6单例模式"><a href="#es6单例模式" class="headerlink" title="es6单例模式"></a>es6单例模式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Db&#123;</span><br><span class="line">    static getInstance()&#123;</span><br><span class="line">       if(!Db.instance)&#123; &#x2F;&#x2F; 单例</span><br><span class="line">           Db.instance &#x3D; new Db();</span><br><span class="line">       &#125;</span><br><span class="line">       return Db.instance;</span><br><span class="line">    &#125;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        console.log(&#39;实例化会触发构造函数&#39;);</span><br><span class="line">        this.connect();</span><br><span class="line">    &#125;</span><br><span class="line">    connect()&#123;</span><br><span class="line">        console.log(&#39;连接数据库&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">    find()&#123;</span><br><span class="line">        console.log(&#39;查询数据库&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p &#x3D; Db.getInstance();</span><br><span class="line">var p1 &#x3D; Db.getInstance();</span><br><span class="line">var p2 &#x3D; Db.getInstance();</span><br><span class="line">var p3 &#x3D; Db.getInstance();</span><br><span class="line">p3.find();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>es6 js web 前端</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>es6</tag>
        <tag>js</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongodb数据库索引、explain使用</title>
    <url>/2020/06/06/Mongodb%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E3%80%81explain%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<h2 id="Mongodb索引及explain使用-作用：在数据库查询数据速度更快"><a href="#Mongodb索引及explain使用-作用：在数据库查询数据速度更快" class="headerlink" title="Mongodb索引及explain使用 作用：在数据库查询数据速度更快"></a>Mongodb索引及explain使用 作用：在数据库查询数据速度更快</h2><h3 id="获取当前集合的索引"><a href="#获取当前集合的索引" class="headerlink" title="获取当前集合的索引"></a>获取当前集合的索引</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.collections.getIndexes()</span><br></pre></td></tr></table></figure>

<h3 id="为当前集合对象创建索引的命令"><a href="#为当前集合对象创建索引的命令" class="headerlink" title="为当前集合对象创建索引的命令"></a>为当前集合对象创建索引的命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.collections.ensureIndex(&#123;name:1&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="删除当前集合对象索引的命令"><a href="#删除当前集合对象索引的命令" class="headerlink" title="删除当前集合对象索引的命令"></a>删除当前集合对象索引的命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.collections.dropIndex(&#123;name:1&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="使用explain-executionStats查询具体的-查询时间"><a href="#使用explain-executionStats查询具体的-查询时间" class="headerlink" title="使用explain executionStats查询具体的 查询时间"></a>使用explain executionStats查询具体的 查询时间</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.collections.find().explain(&quot;executionStats&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mongodb web</category>
      </categories>
      <tags>
        <tag>Mongodb</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>js中!和!!的区别及用法</title>
    <url>/2020/06/02/js/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<h2 id="！可将变量转换成boolean类型，null、undefined和空字符串取反都为false，其余都为true。"><a href="#！可将变量转换成boolean类型，null、undefined和空字符串取反都为false，其余都为true。" class="headerlink" title="！可将变量转换成boolean类型，null、undefined和空字符串取反都为false，其余都为true。"></a>！可将变量转换成boolean类型，null、undefined和空字符串取反都为false，其余都为true。</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!null&#x3D;true</span><br><span class="line">!undefined&#x3D;true</span><br><span class="line">!&#39;&#39;&#x3D;true</span><br><span class="line">!100&#x3D;false</span><br><span class="line">!&#39;abc&#39;&#x3D;false</span><br></pre></td></tr></table></figure>

<h2 id="！！常常用来做类型判断，判断变量a为非空，未定义或者非空串才能执行方法体的内容"><a href="#！！常常用来做类型判断，判断变量a为非空，未定义或者非空串才能执行方法体的内容" class="headerlink" title="！！常常用来做类型判断，判断变量a为非空，未定义或者非空串才能执行方法体的内容"></a>！！常常用来做类型判断，判断变量a为非空，未定义或者非空串才能执行方法体的内容</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a;</span><br><span class="line">if(a!&#x3D;null &amp;&amp; typeof(a)!&#x3D;undefined &amp;&amp; a!&#x3D;&#39;&#39;)&#123;</span><br><span class="line">    &#x2F;&#x2F;a有内容才执行的代码  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="可简写为"><a href="#可简写为" class="headerlink" title="可简写为"></a>可简写为</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(!!a)&#123;</span><br><span class="line">    &#x2F;&#x2F;a有内容才执行的代码  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js web</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>js</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用vscode编写乱码记录</title>
    <url>/2020/06/05/hexo%E4%BD%BF%E7%94%A8vscode%E7%BC%96%E5%86%99%E4%B9%B1%E7%A0%81%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<h2 id="前两天使用hexo记录一篇博客，打开后出现乱码的问题，记录下解决方法。"><a href="#前两天使用hexo记录一篇博客，打开后出现乱码的问题，记录下解决方法。" class="headerlink" title="前两天使用hexo记录一篇博客，打开后出现乱码的问题，记录下解决方法。"></a>前两天使用hexo记录一篇博客，打开后出现乱码的问题，记录下解决方法。</h2><ol>
<li>将文件目录下的 _config.yml 保存为utf-8格式(或者unicode格式)</li>
<li>将 新添加的md文件也保存为utf-8 格式(或者Unicode 格式)</li>
<li>重新启动hexo clean &amp;&amp; hexo generate &amp;&amp; hexo s</li>
</ol>
]]></content>
      <categories>
        <category>hexo, vscode</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>你不像任何人</title>
    <url>/2020/05/20/essays/</url>
    <content><![CDATA[<p><img src="/assets/images/essays.jpg" alt=""></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><a href="https://www.baidu.com/s?ie=UTF-8&wd=宋小君-下雨和见你" target="_blank" rel="noopener">世界上美好的东西不太多，立秋傍晚从河对岸吹来的风。</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">整句话是：</span><br><span class="line">世界上美好的东西不太多,立秋傍晚从河对岸吹来的风, 和二十来岁笑起来要人命的你。</span><br><span class="line">选自宋小君的《下雨和见你》</span><br></pre></td></tr></table></figure>

<p><a href="https://www.baidu.com/s?ie=UTF-8&wd=爱丽丝梦游仙境" target="_blank" rel="noopener">你知道乌鸦为什么像写字台吗?</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">整句话是：</span><br><span class="line">爱丽丝:疯帽子,我喜欢你</span><br><span class="line">疯帽子:为什么</span><br><span class="line">爱丽丝：因为乌鸦长得像写字台</span><br><span class="line">疯帽子:为什么乌鸦长得像写字台</span><br><span class="line">爱丽丝:因为我喜欢你没有理由</span><br><span class="line">--《爱丽丝梦游仙境》</span><br></pre></td></tr></table></figure>

<p><a href="https://www.baidu.com/s?ie=UTF-8&wd=聂鲁达-二十首情诗和一首绝望的歌" target="_blank" rel="noopener">你不像任何人</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">整句话是：</span><br><span class="line">你不像任何人，</span><br><span class="line">因为我爱你。</span><br><span class="line">--聂鲁达《二十首情诗和一首绝望的歌》</span><br></pre></td></tr></table></figure>

<p><a href="https://www.baidu.com/s?ie=UTF-8&wd=沈从文-无题" target="_blank" rel="noopener">我如一张离了枝头日晒风吹的叶子,半死</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">整句话是：</span><br><span class="line">我如一张离了枝头日晒风吹的叶子,半死,</span><br><span class="line">但是你嘴唇可以使他润泽，还有你颈脖同额。</span><br><span class="line">--沈从文《无题》</span><br></pre></td></tr></table></figure>

<p><a href="https://www.baidu.com/s?ie=UTF-8&wd=何三坡-山岗" target="_blank" rel="noopener">在清晨,在燕山上在万丈阳光里树叶里躲藏着锦鸡和百灵一阵风带走了闪烁的流水此刻，我愿意做一个没有理想的人</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">整句话是：</span><br><span class="line">在清晨,在燕山上</span><br><span class="line">在万丈阳光里</span><br><span class="line">树叶里躲藏着锦鸡和百灵</span><br><span class="line">一阵风带走了闪烁的流水</span><br><span class="line">此刻，我愿意做一个</span><br><span class="line">没有理想的人</span><br><span class="line">我愿意一直陪你坐到衰老</span><br><span class="line">像草木一样安静</span><br><span class="line">--何三坡《山岗》</span><br></pre></td></tr></table></figure>

<p><a href="https://www.baidu.com/s?ie=UTF-8&wd=我为什么爱你，先生" target="_blank" rel="noopener">见到日出我便不能自己</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">整句话是：</span><br><span class="line">见到日出我便不能自己,</span><br><span class="line">而你就是日出,</span><br><span class="line">于是，所以，我爱你。</span><br><span class="line">--Emily Dckinso 《我为什么爱你，先生》节选</span><br></pre></td></tr></table></figure>

<p><a href="https://www.baidu.com/s?ie=UTF-8&wd=村上春树-爱如夜半汽笛" target="_blank" rel="noopener">汽笛声的确微弱,听见没听见都分不清。</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">整句话是：</span><br><span class="line">汽笛声的确微弱,听见没听见都分不清。</span><br><span class="line">而我就像爱那汽笛一样爱你。</span><br><span class="line">--村上春树《爱如夜半汽笛》</span><br></pre></td></tr></table></figure>

<p><a href="https://www.baidu.com/s?ie=UTF-8&wd=佩索阿-恋爱中的牧羊人" target="_blank" rel="noopener">明月高悬夜空,眼下是春天。</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">整句话是：</span><br><span class="line">明月高悬夜空,眼下是春天。</span><br><span class="line">我想起了你,内心是完整的。</span><br><span class="line">一股轻风穿过空旷的田野向我吹拂。</span><br><span class="line">我想起了你，轻唤你的名字。</span><br><span class="line">我不是我了：我很幸福。</span><br><span class="line">--佩索阿《恋爱中的牧羊人》节选</span><br></pre></td></tr></table></figure>

<p><a href="https://www.baidu.com/s?ie=UTF-8&wd=罗伯特·勃菜-你手捧希望而来" target="_blank" rel="noopener">夜晚潮湿,地面潮湿，空气寂静,树林沉默。</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">整句话是：</span><br><span class="line">夜晚潮湿,地面潮湿</span><br><span class="line">空气寂静,树林沉默,</span><br><span class="line">今夜我爱你。</span><br><span class="line">--罗伯特·勃菜《你手捧希望而来》</span><br></pre></td></tr></table></figure>

<p><a href="https://www.baidu.com/s?ie=UTF-8&wd=海子-夏天的太阳" target="_blank" rel="noopener">想和你一起走在街上，看看太阳。</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">整句话是：</span><br><span class="line">你来人间一趟</span><br><span class="line">你要看看太阳</span><br><span class="line">和你的心上人一起走在街上</span><br><span class="line">了解她</span><br><span class="line">也要了解太阳</span><br><span class="line">--海子《夏天的太阳》</span><br></pre></td></tr></table></figure>

<p><a href="https://www.baidu.com/s?ie=UTF-8&wd=木苏里-某某" target="_blank" rel="noopener">希望你被簇拥包围，你走的路要繁华盛开，要人声鼎沸。</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">整句话是：</span><br><span class="line">我喜欢你，</span><br><span class="line">所以希望你被簇拥包围，</span><br><span class="line">所以你走的路要繁花盛开，要人声鼎沸。</span><br><span class="line">--木苏里《某某》</span><br></pre></td></tr></table></figure>

<p><a href="https://www.baidu.com/s?ie=UTF-8&wd=沈从文-月下小景" target="_blank" rel="noopener">龙应该藏在云里。</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">整句话是：</span><br><span class="line">龙应该藏在云里，</span><br><span class="line">你应该藏在心里。</span><br><span class="line">--沈从文《月下小景》</span><br></pre></td></tr></table></figure>

<p><a href="https://www.baidu.com/s?ie=UTF-8&wd=张嘉佳-摆渡人" target="_blank" rel="noopener">我愿做个逗号，</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">整句话是：</span><br><span class="line">世事如书，我偏爱你这一句，</span><br><span class="line">愿做个逗号，待在你脚边。</span><br><span class="line">--张嘉佳《摆渡人》</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>essays</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>摘抄</tag>
      </tags>
  </entry>
  <entry>
    <title>learn-markdown</title>
    <url>/2020/05/15/learn-markdown/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br><span class="line"></span><br><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*&#96;</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br><span class="line">&gt;这是引用的内容</span><br></pre></td></tr></table></figure>

<h2 id="引入图片和链接"><a href="#引入图片和链接" class="headerlink" title="引入图片和链接"></a>引入图片和链接</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片名称](图片地址)</span><br><span class="line">[链接名称](链接地址)</span><br></pre></td></tr></table></figure>

<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">无序列表</span><br><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">有序列表</span><br><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure>

<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>学习</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义nodeJs脚手架相关配置</title>
    <url>/2020/06/15/%E8%87%AA%E5%AE%9A%E4%B9%89nodeJs%E8%84%9A%E6%89%8B%E6%9E%B6%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<h2 id="自定义nodeJs脚手架相关配置"><a href="#自定义nodeJs脚手架相关配置" class="headerlink" title="自定义nodeJs脚手架相关配置"></a>自定义nodeJs脚手架相关配置</h2><p>代码地址：<a href="https://github.com/zjiafeng/userinfo/tree/master/nodeJs/14koa_cli" target="_blank" rel="noopener">https://github.com/zjiafeng/userinfo/tree/master/nodeJs/14koa_cli</a></p>
<h3 id="1、引入所需模块-模块版本默认最新-cnpm-isntall"><a href="#1、引入所需模块-模块版本默认最新-cnpm-isntall" class="headerlink" title="1、引入所需模块(模块版本默认最新) cnpm isntall"></a>1、引入所需模块(模块版本默认最新) cnpm isntall</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;art-template&quot;: &quot;^4.13.2&quot;,</span><br><span class="line">&quot;koa&quot;: &quot;^2.12.0&quot;,</span><br><span class="line">&quot;koa-art-template&quot;: &quot;^1.1.1&quot;,</span><br><span class="line">&quot;koa-bodyparser&quot;: &quot;^4.3.0&quot;,</span><br><span class="line">&quot;koa-router&quot;: &quot;^9.0.1&quot;,</span><br><span class="line">&quot;koa-session&quot;: &quot;^6.0.0&quot;,</span><br><span class="line">&quot;koa-static&quot;: &quot;^5.0.0&quot;,</span><br><span class="line">&quot;md5&quot;: &quot;^2.2.1&quot;,</span><br><span class="line">&quot;mongodb&quot;: &quot;^3.5.9&quot;,</span><br><span class="line">&quot;svg-captcha&quot;: &quot;^1.4.0&quot;</span><br></pre></td></tr></table></figure>

<h3 id="2、新建入口文件-配置各个模块"><a href="#2、新建入口文件-配置各个模块" class="headerlink" title="2、新建入口文件 配置各个模块"></a>2、新建入口文件 配置各个模块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**引入所需模块 *&#x2F;</span><br><span class="line">const Koa &#x3D; require(&#39;koa&#39;),</span><br><span class="line">    Router &#x3D; require(&#39;koa-router&#39;),</span><br><span class="line">    render &#x3D; require(&#39;koa-art-template&#39;),</span><br><span class="line">    path &#x3D; require(&#39;path&#39;),</span><br><span class="line">    svgCaptcha &#x3D; require(&#39;svg-captcha&#39;),</span><br><span class="line">    session &#x3D; require(&#39;koa-session&#39;),</span><br><span class="line">    bodyParser &#x3D; require(&#39;koa-bodyparser&#39;),</span><br><span class="line">    serve &#x3D; require(&#39;koa-static&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;**实例化 *&#x2F;</span><br><span class="line">const app &#x3D; new Koa();</span><br><span class="line">const router &#x3D; new Router();</span><br><span class="line"></span><br><span class="line">const CONFIG &#x3D; &#123; &#x2F;&#x2F;配置session参数</span><br><span class="line">    key: &#39;koa.sess&#39;, &#x2F;** 默认*&#x2F;</span><br><span class="line">    maxAge: 864000, &#x2F;** cookie过期时间 *&#x2F;</span><br><span class="line">    autoCommit: true, &#x2F;** (boolean) automatically commit headers (default true) *&#x2F;</span><br><span class="line">    overwrite: true, &#x2F;** (boolean) can overwrite or not (default true) *&#x2F;</span><br><span class="line">    httpOnly: true, &#x2F;** (boolean) httpOnly or not (default true) *&#x2F;</span><br><span class="line">    signed: true, &#x2F;** (boolean) signed or not (default true) *&#x2F;</span><br><span class="line">    rolling: true, &#x2F;** 在每次请求时强行设置 cookie，这将重置 cookie 过期时间（默认：false） *&#x2F;</span><br><span class="line">    renew: false, &#x2F;** (boolean) renew session when session is nearly expired, so we can always keep user logged in. (default is false)*&#x2F;</span><br><span class="line">    secure: false, &#x2F;** 设置为true，则只应通过被 HTTPS 协议加密过的请求发送给服务端 (boolean) secure cookie*&#x2F;</span><br><span class="line">    sameSite: null, &#x2F;** (string) session cookie sameSite options (default null, don&#39;t set it) *&#x2F;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; 配置koa-art-template 模板引擎</span><br><span class="line">render(app, &#123;</span><br><span class="line">    root: path.join(__dirname, &#39;views&#39;), &#x2F;&#x2F; 模板引擎位置</span><br><span class="line">    extname: &#39;.html&#39;, &#x2F;&#x2F; 文件后缀名</span><br><span class="line">    debug: process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39; &#x2F;&#x2F;是否开启调试模式</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;引入子模块</span><br><span class="line">var admin&#x3D;require(&#39;.&#x2F;routes&#x2F;admin.js&#39;);</span><br><span class="line">var api&#x3D;require(&#39;.&#x2F;routes&#x2F;api.js&#39;);</span><br><span class="line">var index&#x3D;require(&#39;.&#x2F;routes&#x2F;index.js&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;配置路由</span><br><span class="line">router.use(&#39;&#x2F;admin&#39;,admin);</span><br><span class="line">router.use(&#39;&#x2F;api&#39;,api);   &#x2F;*在模块里面暴露路由并且启动路由*&#x2F;</span><br><span class="line">router.use(index);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 路由中间件 (拦截)</span><br><span class="line">app.use(async (ctx, next) &#x3D;&gt; &#123;</span><br><span class="line">    await next();</span><br><span class="line">    if (ctx.status &#x3D;&#x3D; 404) &#123;</span><br><span class="line">        ctx.body &#x3D; &#39;这是个404页面&#39;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; console.log(ctx.url)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(bodyParser()); &#x2F;&#x2F; 必须放到启动路由前调用</span><br><span class="line">app.use(serve(__dirname + &#39;&#x2F;public&#39;)); &#x2F;&#x2F;启动koa-static</span><br><span class="line">app.keys &#x3D; [&#39;some secret hurr&#39;]; &#x2F;**作为cookies签名时的秘钥*&#x2F;</span><br><span class="line">app.use(session(CONFIG, app)); &#x2F;&#x2F;启动session</span><br><span class="line">app.use(router.routes()).use(router.allowedMethods()); &#x2F;&#x2F;启动路由 必须放在其他模块后</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>nodeJs web</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>nodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>nodeJs封装Mongodb数据库实现增删改查</title>
    <url>/2020/06/15/nodeJs%E5%B0%81%E8%A3%85Mongodb%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<h2 id="nodeJs封装Mongodb数据库实现增删改查"><a href="#nodeJs封装Mongodb数据库实现增删改查" class="headerlink" title="nodeJs封装Mongodb数据库实现增删改查"></a>nodeJs封装Mongodb数据库实现增删改查</h2><p>代码地址：<a href="https://github.com/zjiafeng/userinfo/tree/master/nodeJs/13koa_mongodb" target="_blank" rel="noopener">https://github.com/zjiafeng/userinfo/tree/master/nodeJs/13koa_mongodb</a></p>
<h3 id="创建mongodb数据库配置文件"><a href="#创建mongodb数据库配置文件" class="headerlink" title="创建mongodb数据库配置文件"></a>创建mongodb数据库配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const app &#x3D; &#123;</span><br><span class="line">    dbUrl : &#39;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&#39;,</span><br><span class="line">    dbName : &#39;koa&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; app;</span><br></pre></td></tr></table></figure>

<h3 id="封装mongodb数据库"><a href="#封装mongodb数据库" class="headerlink" title="封装mongodb数据库"></a>封装mongodb数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const MongoClient &#x3D; require(&#39;mongodb&#39;).MongoClient; &#x2F;&#x2F;引入mongodb数据库模块</span><br><span class="line">const ObjectID &#x3D; require(&#39;mongodb&#39;).ObjectID;</span><br><span class="line">var Config &#x3D; require(&#39;.&#x2F;conf&#39;); &#x2F;&#x2F;引入配置文件</span><br><span class="line"></span><br><span class="line">const client &#x3D; new MongoClient(Config.dbUrl, &#123; useNewUrlParser: true, useUnifiedTopology: true &#125;);</span><br><span class="line"></span><br><span class="line">class Db &#123;</span><br><span class="line">    static getInstance() &#123;   &#x2F;*1、单例  多次实例化实例不共享的问题*&#x2F;</span><br><span class="line">        if (!Db.instance) &#123;</span><br><span class="line">            Db.instance &#x3D; new Db();</span><br><span class="line">        &#125;</span><br><span class="line">        return Db.instance;</span><br><span class="line">    &#125;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        this.dbClient &#x3D; &#39;&#39;; &#x2F;*属性 放db对象*&#x2F;</span><br><span class="line">        this.connect();</span><br><span class="line">    &#125;</span><br><span class="line">    connect() &#123; &#x2F;&#x2F;连接数据库</span><br><span class="line">        let _that &#x3D; this;</span><br><span class="line">        return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">            if (!_that.dbClient) &#123; &#x2F;**解决数据库多次连接问题 *&#x2F;</span><br><span class="line">                client.connect((err, client) &#x3D;&gt; &#123;</span><br><span class="line">                    if (err) &#123;</span><br><span class="line">                        reject(err)</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        _that.dbClient &#x3D; client.db(Config.dbName);</span><br><span class="line">                        resolve(_that.dbClient)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                resolve(_that.dbClient)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    find(collectionName, json) &#123;</span><br><span class="line">        return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">            this.connect().then((db) &#x3D;&gt; &#123;</span><br><span class="line">                var result &#x3D; db.collection(collectionName).find(json);</span><br><span class="line">                result.toArray(function (err, docs) &#123;</span><br><span class="line">                    if (err) &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                    resolve(docs);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    updata(collectionName, jsonOld, jsonNew) &#123;</span><br><span class="line">        return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">            this.connect().then((db) &#x3D;&gt; &#123;</span><br><span class="line">                db.collection(collectionName).updateMany(jsonOld, &#123;$set:jsonNew&#125;, (err, docs) &#x3D;&gt; &#123;</span><br><span class="line">                    if (err) &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                        return</span><br><span class="line">                    &#125;</span><br><span class="line">                    resolve(docs);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    insert(collectionName, json) &#123;</span><br><span class="line">        return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">            this.connect().then((db) &#x3D;&gt; &#123;</span><br><span class="line">                db.collection(collectionName).insertOne(json, (err, docs) &#x3D;&gt; &#123;</span><br><span class="line">                    if (err) &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                        return</span><br><span class="line">                    &#125;</span><br><span class="line">                    resolve(docs)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    remove(collectionName, json) &#123;</span><br><span class="line">        return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">            this.connect().then((db) &#x3D;&gt; &#123;</span><br><span class="line">                db.collection(collectionName).removeOne(json, (err, docs) &#x3D;&gt; &#123;</span><br><span class="line">                    if (err) &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                        return</span><br><span class="line">                    &#125;</span><br><span class="line">                    resolve(docs)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    getObjectId(id) &#123; &#x2F;&#x2F;mongodb中查询_id把字符串转换为对象</span><br><span class="line">        return new ObjectID(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; Db.getInstance();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nodeJs Mongodb</category>
      </categories>
      <tags>
        <tag>Mongodb</tag>
        <tag>nodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>node+koa服务端相关配置</title>
    <url>/2020/06/18/node-koa%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<h2 id="自定义nodeJs脚手架相关配置"><a href="#自定义nodeJs脚手架相关配置" class="headerlink" title="自定义nodeJs脚手架相关配置"></a>自定义nodeJs脚手架相关配置</h2><p>代码地址：<a href="https://github.com/zjiafeng/userinfo/tree/master/nodeJs/16server" target="_blank" rel="noopener">https://github.com/zjiafeng/userinfo/tree/master/nodeJs/16server</a></p>
<h3 id="1、引入所需模块-模块版本默认最新-cnpm-isntall"><a href="#1、引入所需模块-模块版本默认最新-cnpm-isntall" class="headerlink" title="1、引入所需模块(模块版本默认最新) cnpm isntall"></a>1、引入所需模块(模块版本默认最新) cnpm isntall</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;art-template&quot;: &quot;^4.13.2&quot;,</span><br><span class="line">&quot;jsonwebtoken&quot;: &quot;^8.5.1&quot;,</span><br><span class="line">&quot;koa&quot;: &quot;^2.12.0&quot;,</span><br><span class="line">&quot;koa-art-template&quot;: &quot;^1.1.1&quot;,</span><br><span class="line">&quot;koa-bodyparser&quot;: &quot;^4.3.0&quot;,</span><br><span class="line">&quot;koa-generic-session&quot;: &quot;^2.0.4&quot;,</span><br><span class="line">&quot;koa-redis&quot;: &quot;^4.0.1&quot;,</span><br><span class="line">&quot;koa-router&quot;: &quot;^9.0.1&quot;,</span><br><span class="line">&quot;koa-static&quot;: &quot;^5.0.0&quot;,</span><br><span class="line">&quot;md5&quot;: &quot;^2.2.1&quot;,</span><br><span class="line">&quot;mongodb&quot;: &quot;^3.5.9&quot;,</span><br><span class="line">&quot;nodemailer&quot;: &quot;^6.4.8&quot;,</span><br><span class="line">&quot;svg-captcha&quot;: &quot;^1.4.0&quot;</span><br></pre></td></tr></table></figure>

<h3 id="2、新建入口文件-配置各个模块"><a href="#2、新建入口文件-配置各个模块" class="headerlink" title="2、新建入口文件 配置各个模块"></a>2、新建入口文件 配置各个模块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**引入所需模块 *&#x2F;</span><br><span class="line">const Koa &#x3D; require(&#39;koa&#39;),</span><br><span class="line">    Router &#x3D; require(&#39;koa-router&#39;),</span><br><span class="line">    render &#x3D; require(&#39;koa-art-template&#39;),</span><br><span class="line">    path &#x3D; require(&#39;path&#39;),</span><br><span class="line">    svgCaptcha &#x3D; require(&#39;svg-captcha&#39;),</span><br><span class="line">    session &#x3D; require(&#39;koa-generic-session&#39;),</span><br><span class="line">    Redis &#x3D; require(&#39;koa-redis&#39;),</span><br><span class="line">    bodyParser &#x3D; require(&#39;koa-bodyparser&#39;),</span><br><span class="line">    serve &#x3D; require(&#39;koa-static&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;**实例化 *&#x2F;</span><br><span class="line">const app &#x3D; new Koa();</span><br><span class="line">const router &#x3D; new Router();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 配置koa-art-template 模板引擎</span><br><span class="line">render(app, &#123;</span><br><span class="line">    root: path.join(__dirname, &#39;views&#39;), &#x2F;&#x2F; 模板引擎位置</span><br><span class="line">    extname: &#39;.html&#39;, &#x2F;&#x2F; 文件后缀名</span><br><span class="line">    debug: process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39; &#x2F;&#x2F;是否开启调试模式</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;引入子模块</span><br><span class="line">var api&#x3D;require(&#39;.&#x2F;routes&#x2F;api.js&#39;);</span><br><span class="line">var index&#x3D;require(&#39;.&#x2F;routes&#x2F;index.js&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;配置路由</span><br><span class="line">router.use(&#39;&#x2F;api&#39;,api);   &#x2F;*在模块里面暴露路由并且启动路由*&#x2F;</span><br><span class="line">router.use(index);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 路由中间件 (拦截)</span><br><span class="line">app.use(async (ctx, next) &#x3D;&gt; &#123;</span><br><span class="line">    await next();</span><br><span class="line">    if (ctx.status &#x3D;&#x3D; 404) &#123;</span><br><span class="line">        ctx.body &#x3D; &#39;404. 抱歉，您访问的资源不存在&#39;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; console.log(ctx.url)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(bodyParser()); &#x2F;&#x2F; 必须放到启动路由前调用</span><br><span class="line">app.use(serve(__dirname + &#39;&#x2F;public&#39;)); &#x2F;&#x2F;启动koa-static</span><br><span class="line">&#x2F;&#x2F; 一些session和redis相关配置</span><br><span class="line">app.keys &#x3D; [&#39;keys&#39;, &#39;keykeys&#39;]; </span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    store: new Redis()</span><br><span class="line">&#125;));</span><br><span class="line">app.use(router.routes()).use(router.allowedMethods()); &#x2F;&#x2F;启动路由 必须放在其他模块后</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure>

<h3 id="3、新建公共文件目录-util-conf-js"><a href="#3、新建公共文件目录-util-conf-js" class="headerlink" title="3、新建公共文件目录 util/conf.js"></a>3、新建公共文件目录 util/conf.js</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**mongodb数据库配置文件 *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义连接数据库的地址 集合名称</span><br><span class="line">const app &#x3D; &#123;</span><br><span class="line">    dbUrl: &#39;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&#39;,</span><br><span class="line">    dbName: &#39;server01&#39;,</span><br><span class="line">    smtp: &#123;</span><br><span class="line">        get host() &#123;</span><br><span class="line">            return &#39;smtp.qq.com&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        get user() &#123;</span><br><span class="line">            return &#39;2621275142@qq.com&#39; &#x2F;&#x2F; qq邮箱名</span><br><span class="line">        &#125;,</span><br><span class="line">        get pass() &#123;</span><br><span class="line">            return &#39;jkhrgzgopqkbdibe&#39; &#x2F;&#x2F; qq邮箱授权码</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 邮箱验证码</span><br><span class="line">        get code() &#123;</span><br><span class="line">            return () &#x3D;&gt; &#123;</span><br><span class="line">                return Math.random()</span><br><span class="line">                    .toString(16)</span><br><span class="line">                    .slice(2, 6)</span><br><span class="line">                    .toUpperCase()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 定义验证码过期时间rules，5分钟内邮箱</span><br><span class="line">        get expire() &#123;</span><br><span class="line">            return () &#x3D;&gt; &#123;</span><br><span class="line">                return new Date().getTime() + 5 * 60 * 1000</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    redis: &#123;</span><br><span class="line">        get host() &#123;</span><br><span class="line">            return &#39;127.0.0.1&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        get port() &#123;</span><br><span class="line">            return 6379</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; app;</span><br></pre></td></tr></table></figure>

<h3 id="4、新建公共文件目录-util-db-js-对数据操作进行封装"><a href="#4、新建公共文件目录-util-db-js-对数据操作进行封装" class="headerlink" title="4、新建公共文件目录 util/db.js 对数据操作进行封装"></a>4、新建公共文件目录 util/db.js 对数据操作进行封装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const MongoClient &#x3D; require(&#39;mongodb&#39;).MongoClient; &#x2F;&#x2F;引入mongodb数据库模块</span><br><span class="line">const ObjectID &#x3D; require(&#39;mongodb&#39;).ObjectID;</span><br><span class="line">var Config &#x3D; require(&#39;.&#x2F;conf&#39;); &#x2F;&#x2F;引入配置文件</span><br><span class="line"></span><br><span class="line">const client &#x3D; new MongoClient(Config.dbUrl, &#123; useNewUrlParser: true, useUnifiedTopology: true &#125;);</span><br><span class="line"></span><br><span class="line">class Db &#123;</span><br><span class="line">    static getInstance() &#123;   &#x2F;*1、单例  多次实例化实例不共享的问题*&#x2F;</span><br><span class="line">        if (!Db.instance) &#123;</span><br><span class="line">            Db.instance &#x3D; new Db();</span><br><span class="line">        &#125;</span><br><span class="line">        return Db.instance;</span><br><span class="line">    &#125;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        this.dbClient &#x3D; &#39;&#39;; &#x2F;*属性 放db对象*&#x2F;</span><br><span class="line">        this.connect();</span><br><span class="line">    &#125;</span><br><span class="line">    connect() &#123; &#x2F;&#x2F;连接数据库</span><br><span class="line">        let _that &#x3D; this;</span><br><span class="line">        return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">            if (!_that.dbClient) &#123; &#x2F;**解决数据库多次连接问题 *&#x2F;</span><br><span class="line">                client.connect((err, client) &#x3D;&gt; &#123;</span><br><span class="line">                    if (err) &#123;</span><br><span class="line">                        reject(err)</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        _that.dbClient &#x3D; client.db(Config.dbName);</span><br><span class="line">                        resolve(_that.dbClient)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                resolve(_that.dbClient)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    find(collectionName, json) &#123;</span><br><span class="line">        return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">            this.connect().then((db) &#x3D;&gt; &#123;</span><br><span class="line">                var result &#x3D; db.collection(collectionName).find(json);</span><br><span class="line">                result.toArray(function (err, docs) &#123;</span><br><span class="line">                    if (err) &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                    resolve(docs);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    updata(collectionName, jsonOld, jsonNew) &#123;</span><br><span class="line">        return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">            this.connect().then((db) &#x3D;&gt; &#123;</span><br><span class="line">                db.collection(collectionName).updateMany(jsonOld, &#123;$set:jsonNew&#125;, (err, docs) &#x3D;&gt; &#123;</span><br><span class="line">                    if (err) &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                        return</span><br><span class="line">                    &#125;</span><br><span class="line">                    resolve(docs);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    insert(collectionName, json) &#123;</span><br><span class="line">        return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">            this.connect().then((db) &#x3D;&gt; &#123;</span><br><span class="line">                db.collection(collectionName).insertOne(json, (err, docs) &#x3D;&gt; &#123;</span><br><span class="line">                    if (err) &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                        return</span><br><span class="line">                    &#125;</span><br><span class="line">                    resolve(docs)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    remove(collectionName, json) &#123;</span><br><span class="line">        return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">            this.connect().then((db) &#x3D;&gt; &#123;</span><br><span class="line">                db.collection(collectionName).removeOne(json, (err, docs) &#x3D;&gt; &#123;</span><br><span class="line">                    if (err) &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                        return</span><br><span class="line">                    &#125;</span><br><span class="line">                    resolve(docs)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    getObjectId(id) &#123; &#x2F;&#x2F;mongodb中查询_id把字符串转换为对象</span><br><span class="line">        return new ObjectID(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; Db.getInstance();</span><br></pre></td></tr></table></figure>

<h3 id="5、新建公共文件目录-util-tool-js"><a href="#5、新建公共文件目录-util-tool-js" class="headerlink" title="5、新建公共文件目录 util/tool.js"></a>5、新建公共文件目录 util/tool.js</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var md5 &#x3D; require(&#39;md5&#39;), jwt &#x3D; require(&#39;jsonwebtoken&#39;);</span><br><span class="line"></span><br><span class="line">let tools &#x3D; &#123;</span><br><span class="line">    md5(str) &#123;</span><br><span class="line">        return md5(str);</span><br><span class="line">    &#125;,</span><br><span class="line">    createToken(user_id) &#123;</span><br><span class="line">        const token &#x3D; jwt.sign(</span><br><span class="line">            &#123;</span><br><span class="line">                user_id: user_id</span><br><span class="line">            &#125;,</span><br><span class="line">            &#39;zhangjf&#39;,</span><br><span class="line">            &#123;</span><br><span class="line">                expiresIn: &#39;1h&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        return token</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; tools;</span><br></pre></td></tr></table></figure>

<h3 id="6、新建公共文件目录-util-checkToken-js-jwt验证token"><a href="#6、新建公共文件目录-util-checkToken-js-jwt验证token" class="headerlink" title="6、新建公共文件目录 util/checkToken.js  jwt验证token"></a>6、新建公共文件目录 util/checkToken.js  jwt验证token</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const jwt &#x3D; require(&#39;jsonwebtoken&#39;);</span><br><span class="line">&#x2F;&#x2F;检查token是否过期</span><br><span class="line">module.exports &#x3D; async ( ctx, next ) &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F;拿到token</span><br><span class="line">    const authorization &#x3D; ctx.get(&#39;Authorization&#39;);</span><br><span class="line">    if (authorization &#x3D;&#x3D;&#x3D; &#39;&#39;) &#123;</span><br><span class="line">        ctx.throw(401, &#39;no token detected in http headerAuthorization&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">    const token &#x3D; authorization.split(&#39; &#39;)[1];</span><br><span class="line">    let tokenContent;</span><br><span class="line">    try &#123;</span><br><span class="line">        tokenContent &#x3D; await jwt.verify(token, &#39;zhangjf&#39;);&#x2F;&#x2F;如果token过期或验证失败，将抛出错误</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">        ctx.throw(401, &#39;invalid token&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">    await next();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="7、登录接口模块的具体操作"><a href="#7、登录接口模块的具体操作" class="headerlink" title="7、登录接口模块的具体操作"></a>7、登录接口模块的具体操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var router &#x3D; require(&#39;koa-router&#39;)();</span><br><span class="line">var tools &#x3D; require(&#39;..&#x2F;..&#x2F;util&#x2F;tool.js&#39;);</span><br><span class="line">var Db &#x3D; require(&#39;..&#x2F;..&#x2F;util&#x2F;db.js&#39;);</span><br><span class="line">var nodeMailer &#x3D; require(&#39;nodeMailer&#39;);</span><br><span class="line">var Config &#x3D; require(&#39;..&#x2F;..&#x2F;util&#x2F;conf&#39;); &#x2F;&#x2F;引入配置文件</span><br><span class="line">var Redis &#x3D; require(&#39;koa-redis&#39;); </span><br><span class="line">var checkToken &#x3D; require(&#39;..&#x2F;..&#x2F;util&#x2F;checkToken&#39;);</span><br><span class="line">&#x2F;&#x2F; 获取redis的客户端</span><br><span class="line">const Store &#x3D; new Redis().client</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 发送验证码</span><br><span class="line">router.post(&#39;&#x2F;verify&#39;, async (ctx, next) &#x3D;&gt; &#123;</span><br><span class="line">    const username &#x3D; ctx.request.body.username;</span><br><span class="line">    const saveExpire &#x3D; await Store.hget(&#96;nodemail:$&#123;username&#125;&#96;, &#39;expire&#39;) &#x2F;&#x2F; 拿到过期时间</span><br><span class="line"></span><br><span class="line">    console.log(ctx.request.body)</span><br><span class="line">    console.log(&#39;当前时间:&#39;, new Date().getTime())</span><br><span class="line">    console.log(&#39;过期时间：&#39;, saveExpire)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 检验已存在的验证码是否过期，以限制用户频繁发送验证码</span><br><span class="line">    if (saveExpire &amp;&amp; new Date().getTime() - saveExpire &lt; 0) &#123;</span><br><span class="line">        ctx.body &#x3D; &#123;</span><br><span class="line">            code: -1,</span><br><span class="line">            msg: &#39;发送过于频繁，请稍后再试&#39;</span><br><span class="line">        &#125;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; QQ邮箱smtp服务权限校验</span><br><span class="line">    const transporter &#x3D; nodeMailer.createTransport(&#123;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         *  端口465和587用于电子邮件客户端到电子邮件服务器通信 - 发送电子邮件。</span><br><span class="line">         *  端口465用于smtps SSL加密在任何SMTP级别通信之前自动启动。</span><br><span class="line">         *  端口587用于msa</span><br><span class="line">         *&#x2F;</span><br><span class="line">        host: Config.smtp.host,</span><br><span class="line">        port: 587,</span><br><span class="line">        secure: false, &#x2F;&#x2F; 为true时监听465端口，为false时监听其他端口</span><br><span class="line">        auth: &#123;</span><br><span class="line">            user: Config.smtp.user,</span><br><span class="line">            pass: Config.smtp.pass</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 邮箱需要接收的信息</span><br><span class="line">    const ko &#x3D; &#123;</span><br><span class="line">        code: Config.smtp.code(),</span><br><span class="line">        expire: Config.smtp.expire(),</span><br><span class="line">        email: ctx.request.body.email,</span><br><span class="line">        username: ctx.request.body.username</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 邮件中需要显示的内容</span><br><span class="line">    const mailOptions &#x3D; &#123;</span><br><span class="line">        from: &#96;&quot;认证邮件&quot; &lt;$&#123;Config.smtp.user&#125;&gt;&#96;, &#x2F;&#x2F; 邮件来自</span><br><span class="line">        to: ko.email, &#x2F;&#x2F; 邮件发往</span><br><span class="line">        subject: &#39;邀请码&#39;, &#x2F;&#x2F; 邮件主题 标题</span><br><span class="line">        html: &#96;用户$&#123;ko.username&#125;，您正在注册****，您的邀请码是$&#123;ko.code&#125;&#96; &#x2F;&#x2F; 邮件内容</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 执行发送邮件</span><br><span class="line">    await transporter.sendMail(mailOptions, (err, info) &#x3D;&gt; &#123;</span><br><span class="line">        if (err) &#123;</span><br><span class="line">            return console.log(&#39;发送邮件失败&#39;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            console.log(&#96;nodemail:$&#123;ko.username&#125;&#96;, &#39;code&#39;, ko.code, &#39;expire&#39;, ko.expire, &#39;email&#39;, ko.email);</span><br><span class="line">            Store.hmset(&#96;nodemail:$&#123;ko.username&#125;&#96;, &#39;code&#39;, ko.code, &#39;expire&#39;, ko.expire, &#39;email&#39;, ko.email)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    ctx.body &#x3D; &#123;</span><br><span class="line">        code: 0,</span><br><span class="line">        msg: &#39;验证码已发送，请注意查收，可能会有延时，有效期5分钟&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 注册接口</span><br><span class="line">router.post(&#39;&#x2F;register&#39;, async (ctx) &#x3D;&gt; &#123;</span><br><span class="line">    let &#123; username, password, email, code &#125; &#x3D; ctx.request.body</span><br><span class="line">    console.log(ctx.request.body);</span><br><span class="line">    if (code) &#123;</span><br><span class="line">        const saveCode &#x3D; await Store.hget(&#96;nodemail:$&#123;username&#125;&#96;, &#39;code&#39;) &#x2F;&#x2F; 拿到已存储的真实的验证码</span><br><span class="line">        const saveExpire &#x3D; await Store.hget(&#96;nodemail:$&#123;username&#125;&#96;, &#39;expire&#39;) &#x2F;&#x2F; 过期时间</span><br><span class="line"></span><br><span class="line">        console.log(ctx.request.body)</span><br><span class="line">        console.log(&#39;redis中保存的验证码：&#39;, saveCode)</span><br><span class="line">        console.log(&#39;当前时间:&#39;, new Date().getTime())</span><br><span class="line">        console.log(&#39;过期时间：&#39;, saveExpire)</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 用户提交的验证码是否等于已存的验证码</span><br><span class="line">        if (code &#x3D;&#x3D;&#x3D; saveCode) &#123;</span><br><span class="line">            if (new Date().getTime() - saveExpire &gt; 0) &#123;</span><br><span class="line">                ctx.body &#x3D; &#123;</span><br><span class="line">                    code: -1,</span><br><span class="line">                    msg: &#39;验证码已过期，请重新申请&#39;</span><br><span class="line">                &#125;</span><br><span class="line">                return</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            ctx.body &#x3D; &#123;</span><br><span class="line">                code: -1,</span><br><span class="line">                msg: &#39;请填写正确的验证码&#39;</span><br><span class="line">            &#125;</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        ctx.body &#x3D; &#123;</span><br><span class="line">            code: -1,</span><br><span class="line">            msg: &#39;请填写验证码&#39;</span><br><span class="line">        &#125;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 用户名是否已经被注册</span><br><span class="line">    const user &#x3D; await Db.find(&#39;userlist&#39;, &#123;&quot;username&quot;:username&#125;)</span><br><span class="line">    if (user.length) &#123;</span><br><span class="line">        ctx.body &#x3D; &#123;</span><br><span class="line">            code: -1,</span><br><span class="line">            msg: &#39;该用户名已被注册&#39;</span><br><span class="line">        &#125;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 如果用户名未被注册，则写入数据库</span><br><span class="line">    const newUser &#x3D; await Db.insert(&#39;userlist&#39;,&#123;</span><br><span class="line">        username,</span><br><span class="line">        password,</span><br><span class="line">        email,</span><br><span class="line">        token: tools.createToken(this.username) &#x2F;&#x2F; 生成一个token 存入数据库</span><br><span class="line">    &#125;)</span><br><span class="line">    &#x2F;&#x2F; console.log(newUser);</span><br><span class="line">    &#x2F;&#x2F; 如果用户名被成功写入数据库，则返回注册成功</span><br><span class="line">    if (newUser.ok &#x3D; 1) &#123;</span><br><span class="line">        ctx.body &#x3D; &#123;</span><br><span class="line">            code: 0,</span><br><span class="line">            msg: &#39;注册成功&#39;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        ctx.body &#x3D; &#123;</span><br><span class="line">            code: -1,</span><br><span class="line">            msg: &#39;注册失败&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 登录接口</span><br><span class="line">router.post(&#39;&#x2F;login&#39;,async (ctx)&#x3D;&gt;&#123;</span><br><span class="line">    let &#123;username, password&#125; &#x3D; ctx.request.body;</span><br><span class="line">    result &#x3D; await Db.find(&#39;userlist&#39;,&#123;username&#125;);</span><br><span class="line">    console.log(result);</span><br><span class="line">    if(!result)&#123;</span><br><span class="line">        ctx.body &#x3D; &#123;</span><br><span class="line">            code: -1,</span><br><span class="line">            msg: &#39;用户名不存在&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else if(result[0].password !&#x3D; password)&#123;</span><br><span class="line">        ctx.body &#x3D; &#123;</span><br><span class="line">            code: -1,</span><br><span class="line">            msg: &#39;用户密码错误&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else if(result[0].password &#x3D;&#x3D; password)&#123;</span><br><span class="line">        let token &#x3D; tools.createToken(username)</span><br><span class="line">        &#x2F;&#x2F; console.log(token)</span><br><span class="line">        try &#123;</span><br><span class="line">            await Db.updata(&#39;userlist&#39;,&#123;username:username&#125;,&#123;token:token&#125;);</span><br><span class="line">            ctx.body &#x3D; &#123;</span><br><span class="line">                code: 0,</span><br><span class="line">                msg: &#39;登录成功&#39;,</span><br><span class="line">                data: [</span><br><span class="line">                    &#123;username,token&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (error) &#123;</span><br><span class="line">            ctx.body &#x3D; &#123;</span><br><span class="line">                code: -1,</span><br><span class="line">                msg: &#39;登录失败,请重新登录&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取所有用户列表</span><br><span class="line">router.get(&#39;&#x2F;getAlluser&#39;,checkToken, async (ctx)&#x3D;&gt;&#123;</span><br><span class="line">    ctx.body &#x3D; &#39;用户查找&#39;</span><br><span class="line">    try &#123;</span><br><span class="line">        let newArr &#x3D; [];</span><br><span class="line">        let result &#x3D; await Db.find(&#39;userlist&#39;,&#123;&#125;);</span><br><span class="line">        result.map((value,index)&#x3D;&gt;&#123;</span><br><span class="line">            newArr.push(&#123;</span><br><span class="line">                username: value.username,</span><br><span class="line">                email: value.email</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        console.log(result);</span><br><span class="line">        ctx.body &#x3D; &#123;</span><br><span class="line">            code: 0,</span><br><span class="line">            msg: &#39;用户查询成功&#39;,</span><br><span class="line">            data: [&#123;newArr&#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        ctx.body &#x3D; &#123;</span><br><span class="line">            code: -1,</span><br><span class="line">            msg: &#39;查找失败&#39;,</span><br><span class="line">            result: err</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">module.exports &#x3D; router.routes();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nodeJs web</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>nodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>nodeJs操作Mongodb数据库</title>
    <url>/2020/06/07/nodeJs%E6%93%8D%E4%BD%9CMongodb%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<h2 id="nodeJs中使用mongodb3-x模块操作数据库的方法"><a href="#nodeJs中使用mongodb3-x模块操作数据库的方法" class="headerlink" title="nodeJs中使用mongodb3.x模块操作数据库的方法"></a>nodeJs中使用mongodb3.x模块操作数据库的方法</h2><h3 id="安装mongodb模块"><a href="#安装mongodb模块" class="headerlink" title="安装mongodb模块"></a>安装mongodb模块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install mongodb --save</span><br></pre></td></tr></table></figure>

<h3 id="引入mongodb下面的MongoClient"><a href="#引入mongodb下面的MongoClient" class="headerlink" title="引入mongodb下面的MongoClient"></a>引入mongodb下面的MongoClient</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const MongoClient &#x3D; require(&#39;mongodb&#39;).MongoClient;</span><br></pre></td></tr></table></figure>

<h3 id="定义数据库连接的地址-以及配置数据库"><a href="#定义数据库连接的地址-以及配置数据库" class="headerlink" title="定义数据库连接的地址 以及配置数据库"></a>定义数据库连接的地址 以及配置数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var MongoUrl &#x3D; &#39;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&#39;,dbName &#x3D; &#39;shop&#39;;</span><br></pre></td></tr></table></figure>

<h3 id="连接数据库-添加数据"><a href="#连接数据库-添加数据" class="headerlink" title="连接数据库+添加数据"></a>连接数据库+添加数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MongoClient.connect(MongoUrl,(err,client)&#x3D;&gt;&#123;</span><br><span class="line"></span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#39;数据连接失败&#39;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    let db&#x3D;client.db(dbName);   &#x2F;*获取db对象*&#x2F;</span><br><span class="line"></span><br><span class="line">    db.collection(&quot;admin&quot;).insert(&#123;&quot;name&quot;:&quot;mongodb&quot;,&quot;age&quot;:10&#125;,function(err)&#123;</span><br><span class="line"></span><br><span class="line">        if(err)&#123;</span><br><span class="line">            console.log(&#39;增加失败&#39;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(&#39;增加成功&#39;);</span><br><span class="line">        client.close();  &#x2F;*关闭数据库*&#x2F;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="连接数据库-修改数据"><a href="#连接数据库-修改数据" class="headerlink" title="连接数据库+修改数据"></a>连接数据库+修改数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MongoClient.connect(MongoUrl,(err,client)&#x3D;&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(&#39;连接数据库失败&#39;);</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">    let db &#x3D; client.db(dbName); &#x2F;&#x2F;获取db对象</span><br><span class="line">    db.collection(&quot;admin&quot;).updateMany(&#123;name:&quot;mongodb&quot;&#125;,&#123;$set:&#123;</span><br><span class="line">        age:&quot;20&quot;</span><br><span class="line">    &#125;&#125;,(err,result)&#x3D;&gt;&#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            console.log(err + &#39;修改失败&#39;);</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(result + &#39;修改成功&#39;);</span><br><span class="line">        client.close();  &#x2F;&#x2F;关闭数据库</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="连接数据库-查找数据"><a href="#连接数据库-查找数据" class="headerlink" title="连接数据库+查找数据"></a>连接数据库+查找数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MongoClient.connect(MongoUrl,(err,client)&#x3D;&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err + &#39;连接数据库失败&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">    let db &#x3D; client.db(dbName);</span><br><span class="line">    let newArr &#x3D; [];</span><br><span class="line">    let list &#x3D; db.collection(&#39;admin&#39;).find();</span><br><span class="line">    console.log(list);</span><br><span class="line">    list.each((err,result)&#x3D;&gt;&#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            console.log(err + &#39;查找数据错误&#39;);</span><br><span class="line">            return false</span><br><span class="line">        &#125;else if(result !&#x3D; null)&#123;</span><br><span class="line">            newArr.push(result)</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            console.log(newArr);</span><br><span class="line">            client.close(); &#x2F;&#x2F;关闭数据库</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="连接数据库-删除数据"><a href="#连接数据库-删除数据" class="headerlink" title="连接数据库+删除数据"></a>连接数据库+删除数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MongoClient.connect(MongoUrl,(err,client)&#x3D;&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err + &#39;连接数据库失败&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">    let db &#x3D; client.db(dbName);</span><br><span class="line">    db.collection(&quot;admin&quot;).deleteMany(&#123;&quot;name&quot;:&quot;mongodb&quot;&#125;,function(err)&#123;</span><br><span class="line"></span><br><span class="line">        if(err)&#123;</span><br><span class="line">            console.log(&#39;删除失败&#39;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(&#39;删除成功&#39;);</span><br><span class="line">        client.close();  &#x2F;*关闭数据库*&#x2F;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>nodeJs Mongodb</category>
      </categories>
      <tags>
        <tag>Mongodb</tag>
        <tag>nodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>git基本使用命令</title>
    <url>/2019/12/12/git%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<h2 id="git基本使用命令"><a href="#git基本使用命令" class="headerlink" title="git基本使用命令"></a>git基本使用命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone &#39;项目地址&#39; 从远端拉取项目代码</span><br><span class="line">git remote -v 查看远程仓库信息</span><br><span class="line">git switch -c &lt;branch-name&gt; 创建并切换新分支</span><br><span class="line">git switch master 切换到主分支</span><br><span class="line">git merge &lt;branch-name&gt; 合并指定分支到当前分支</span><br><span class="line">git branch -d &lt;branch-name&gt; 删除指定分支</span><br><span class="line">git branch -D &lt;branch-name&gt; 删除一个未合并的分支</span><br><span class="line">git branch 查看分支信息</span><br><span class="line"></span><br><span class="line">git reset --hard &lt;commit-id&gt; 回退到指定版本</span><br><span class="line">git log 查看提交历史,以便确定回退到哪个版本</span><br><span class="line">git reflog 查看历史命令,以便确定回退到哪个版本</span><br><span class="line"></span><br><span class="line">git checkout -- &lt;file-name&gt; 改错了某个文件,丢弃工作区修改</span><br><span class="line">git rm &lt;file-name&gt; 删除文件</span><br><span class="line"></span><br><span class="line">git pull 从远端仓库拉取最新代码</span><br><span class="line">git add . 添加修改文件到暂存区</span><br><span class="line">git commit -m &lt;修改内容说明&gt; 提交修改文件到本地分支</span><br><span class="line">git push orgin &lt;branch-name&gt; 推送代码远端仓库</span><br><span class="line"></span><br><span class="line">git tag &lt;tag-name&gt; 新建一个标签</span><br><span class="line">git tag 查看所有标签</span><br><span class="line">git push origin &lt;tag-name&gt; 推送本地分支</span><br><span class="line">git push origin --tags 推送全部未推送的标签</span><br><span class="line">git tag -d &lt;tag-name&gt; 删除一个本地标签</span><br><span class="line">git push origin :refs&#x2F;tags&#x2F;&lt;tag-name&gt; 删除一个远程标签</span><br><span class="line"></span><br><span class="line">如果推送失败，先用git pull抓取远程的新提交;</span><br><span class="line">在本地创建和远程分支对应的分支，使用git switch -c &lt;branch-name&gt; origin&#x2F;branch-name，本地和远程分支的名称最好一致;</span><br><span class="line">建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin&#x2F;branch-name;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
